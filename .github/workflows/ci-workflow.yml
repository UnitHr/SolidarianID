# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  container-postgres:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:20-bookworm-slim

    # Service containers to run with `container-job`
    services:
      postgres:
        # Docker Hub image
        image: postgres:latest
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: solidarianid
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
  container-mongo:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:20-bookworm-slim

    # Service containers to run with `container-job`
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_HOST: localhost
          MONGO_PORT: 27017
          MONGO_DB: solidarianid

  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    services:
      postgres:
        # Docker Hub image
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: solidarianid
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_HOST: localhost
          MONGO_PORT: 27017
          MONGO_DB: solidarianid
      

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    - name: Build the project
      working-directory: ./backend
      run: npm run build --if-present
  # - name: Run tests
  #   working-directory: ./backend
  #   run: npm test
