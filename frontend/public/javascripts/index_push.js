function testNotification() {
  console.log('testNotification()');

  var notifTitle = 'Prueba de Notificación desde Navegador';
  var options = {
    body: 'Mensaje de Notificación enviado desde la aplicación BlogSoliddarian en el Navegador',
    icon: 'images/blog_24.png',
  };
  var notif = new Notification(notifTitle, options);
  // setTimeout(testNotification, 4000); //a los 4 segundos
}

var button = document.getElementById('notifications');
button.addEventListener('click', function (e) {
  Notification.requestPermission().then(function (result) {
    if (result === 'granted') {
      //setTimeout(testNotification, 4000); //a los 4 segundos
      testNotification();
    }
  });
});

// Register a Service Worker.
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.getRegistrations().then((registrations) => {
    if (registrations.length > 0) console.log('Service Worker previamente instalado.');
    else
      navigator.serviceWorker
        .register('javascripts/sw.js')
        .then((registration) => {
          console.log('Service Worker instalado.');

          console.log('Getting Subscription to Push SYSTEM.');
          return registration.pushManager.getSubscription().then(async function (subscription) {
            // If a subscription was found, return it.
            if (subscription) {
              console.log('serviceWorker.ready>> there is SUBS');
              return subscription;
            }

            console.log('serviceWorker.ready>> there is NOT SUBS');
            // Get the server's public key
            const response = await fetch('./push/vapidPublicKey');
            const vapidPublicKey = await response.text();
            console.log('serviceWorker.ready>> ' + vapidPublicKey);
            // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
            // urlBase64ToUint8Array() is defined in /tools.js
            const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

            // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
            // send notifications that don't have a visible effect for the user).
            console.log('serviceWorker.ready>> Subscribing');
            return registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: convertedVapidKey,
            });
          });
        })
        .then((subscription) => {
          console.log('serviceWorker.ready>> Registering Subscription at ' + subscription.endpoint);
          // Send the subscription details to the server using the Fetch API.
          fetch('./push/register', {
            method: 'post',
            headers: {
              'Content-type': 'application/json',
            },
            body: JSON.stringify({
              subscription: subscription,
            }),
          });

          console.log(
            'Adding onClick DoIT button for sendNotification at .' + subscription.endpoint
          );
          document.getElementById('doIt').onclick = function () {
            alert('click DoIT!! at: ' + subscription.endpoint);
            console.log('DoIT!!>> Sending a Notification to the Push System');

            const payload = document.getElementById('notification-payload').value;
            const delay = document.getElementById('notification-delay').value;
            const ttl = document.getElementById('notification-ttl').value;

            // Ask the server to send the client a notification (for testing purposes, in actual
            // applications the push notification is likely going to be generated by some event
            // in the server).
            fetch('./push/sendNotification', {
              method: 'post',
              headers: {
                'Content-type': 'application/json',
              },
              body: JSON.stringify({
                subscription: subscription,
                payload: payload,
                delay: delay,
                ttl: ttl,
              }),
            });
          };
        });
  });
}
